AWSTemplateFormatVersion: "2010-09-09"
Description: "AWS CloudFormation template for Amazon OpenSearch Service domain (photoscf) with t3.small.search instance type"

Resources:
  PhotosCFDomain:
    Type: "AWS::OpenSearchService::Domain"
    Properties:
      AdvancedSecurityOptions:
        Enabled: true
        InternalUserDatabaseEnabled: false
        MasterUserOptions: {
          MasterUserARN: arn:aws:iam::857213095760:role/service-role/index-photos-LF1
        }
      NodeToNodeEncryptionOptions:
        Enabled: true
      EncryptionAtRestOptions:
        Enabled: true
      DomainEndpointOptions:
        EnforceHTTPS: true
      DomainName: "photoscf"
      EngineVersion: "OpenSearch_2.5"
      ClusterConfig:
        InstanceType: "t3.small.search"
        InstanceCount: 1
      EBSOptions:
        EBSEnabled: true
        VolumeType: "gp3"
        VolumeSize: 10
      SnapshotOptions:
        AutomatedSnapshotStartHour: 0
      AccessPolicies:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              AWS: 'arn:aws:iam::857213095760:user/opensearch_user'
            Action: "es:*"
            Resource: !Sub 'arn:aws:es:us-east-1:857213095760:domain/photoscf/*'
  
  S3Bucket1:
    Type: 'AWS::S3::Bucket'
    Properties:
      AccessControl: PublicRead
      BucketName: "hw2bucket1fuxy"
      WebsiteConfiguration:
        IndexDocument: index.html
        ErrorDocument: error.html

  S3Bucket2:
    Type: 'AWS::S3::Bucket'
    DependsOn:
      - S3Permission
    Properties:
      AccessControl: PublicRead
      BucketName: "hw2bucket2fuxy"
      NotificationConfiguration:
        LambdaConfigurations:
          - Event: s3:ObjectCreated:Put
            Function: !GetAtt indexPhoto.Arn
  
  S3Permission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref indexPhoto
      Action: lambda:InvokeFunction
      Principal: s3.amazonaws.com
      SourceAccount: '857213095760'
      SourceArn: "arn:aws:s3:::hw2bucket2fuxy"
  
  indexPhoto:
    Type: AWS::Lambda::Function
    Properties:
      Runtime: python3.9
      Role: arn:aws:iam::857213095760:role/service-role/index-photos-LF1
      Handler: lambda_function.lambda_handler
      Code:
        S3Bucket: codeforlf1
        S3Key: openSearchSetup-indexPhoto-itIfYVCUDWVe-a0203734-59df-4936-9190-4375a89be741.zip

  searchPhoto:
    Type: 'AWS::Lambda::Function'
    Properties:
      Runtime: python3.9
      Role: arn:aws:iam::857213095760:role/service-role/search-photos-role-p8hhgwlj
      Handler: lambda_function.lambda_handler
      Code:
        S3Bucket: codeforlf1
        S3Key: openSearchSetup-searchPhoto-WLm8ycPL1Wq3-b098589f-db9e-4634-a76e-2df9f4d22304.zip
  
  ##### Bot Role #####
  BotRuntimeRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lexv2.amazonaws.com
            Action:
              - "sts:AssumeRole"
      Path: "/"
      Policies:
        - PolicyName: LexRuntimeRolePolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - "polly:SynthesizeSpeech"
                  - "comprehend:DetectSentiment"
                Resource: "*"     

  SearchPhotoLex:
    DependsOn: BotRuntimeRole
    Type: AWS::Lex::Bot
    Properties:
      Name: "SearchPhotoLexBot"
      RoleArn: !GetAtt BotRuntimeRole.Arn
      DataPrivacy:
        ChildDirected: false
      IdleSessionTTLInSeconds: 300
      Description: "How to search photo with bot"
      AutoBuildBotLocales: false
      BotLocales:
        - LocaleId: "en_US"
          Description: "Search a photo bot Locale"
          NluConfidenceThreshold: 0.40
          Intents:
            - Name: "SearchIntent"
              Description: "Intent to search photos"
              SampleUtterances:
                - Utterance: "{Keyword1}"
                - Utterance: "show me some photos with {Keyword1}"
                - Utterance: "I want some photos with {Keyword1}"
                - Utterance: "{Keyword1} and {Keyword2}"
                - Utterance: "show me photos with {Keyword1} and {Keyword2}"
                - Utterance: "I want some photos with {Keyword1} and {Keyword2}"
              SlotPriorities:
                - Priority: 1
                  SlotName: Keyword1
                - Priority: 2
                  SlotName: Keyword2 
              Slots:
                - Name: "Keyword1"
                  Description: "First keyword"
                  SlotTypeName: "AMAZON.AlphaNumeric"
                  ValueElicitationSetting:
                    SlotConstraint: "Required"
                    PromptSpecification:
                      MessageGroupsList:
                        - Message:
                            PlainTextMessage:
                              Value: "-"
                      MaxRetries: 3
                      AllowInterrupt: false
                - Name: "Keyword2"
                  Description: "Second keyword"
                  SlotTypeName: "AMAZON.AlphaNumeric"
                  ValueElicitationSetting:
                    SlotConstraint: "Required"
                    PromptSpecification:
                      MessageGroupsList:
                        - Message:
                            PlainTextMessage:
                              Value: "-"
                      MaxRetries: 3
                      AllowInterrupt: false
            - Name: "FallbackIntent"
              Description: "Default intent when no other intent matches"
              ParentIntentSignature: "AMAZON.FallbackIntent"
  
  SearchPhotoBotVersion:
    DependsOn: SearchPhotoLex
    Type: AWS::Lex::BotVersion
    Properties:
      BotId: !Ref SearchPhotoLex
      BotVersionLocaleSpecification:
        - LocaleId: en_US
          BotVersionLocaleDetails:
            SourceBotVersion: DRAFT
      Description: SearchPhoto Version  

  FirstBotAlias:
    DependsOn: SearchPhotoBotVersion
    Type: AWS::Lex::BotAlias
    Properties:
      BotId: !Ref SearchPhotoLex
      BotAliasName: "SearchPhotoAlias"
      BotVersion: !GetAtt SearchPhotoBotVersion.BotVersion
      BotAliasLocaleSettings:
      - LocaleId: "en_US"
        BotAliasLocaleSetting:
          Enabled: true
      SentimentAnalysisSettings:
        DetectSentiment: false
  
  photoAPI:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: 'photoSearch'
      Body:
        swagger: "2.0"
        info:
          description: "AI Photo Search application, built during the Cloud and Big Data course\
            \ at Columbia University."
          version: "1.0.0"
          title: "AI Photo Search"
        host: "q2msd1wqvh.execute-api.us-east-1.amazonaws.com"
        basePath: "/stage1"
        schemes:
        - "https"
        paths:
          /search:
            get:
              operationId: "searchPhotos"
              produces:
              - "application/json"
              parameters:
              - name: "q"
                in: "query"
                required: false
                type: "string"
              responses:
                "200":
                  description: "200 response"
                  schema:
                    $ref: "#/definitions/SearchResponse"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                "500":
                  description: "500 response"
                  schema:
                    $ref: "#/definitions/Error"
                "403":
                  description: "403 response"
                  schema:
                    $ref: "#/definitions/Error"
            options:
              consumes:
              - "application/json"
              responses:
                "200":
                  description: "200 response"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                    Access-Control-Allow-Methods:
                      type: "string"
                    Access-Control-Allow-Headers:
                      type: "string"
          /upload:
            options:
              consumes:
              - "application/json"
              responses:
                "200":
                  description: "200 response"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                    Access-Control-Allow-Methods:
                      type: "string"
                    Access-Control-Allow-Headers:
                      type: "string"
          /upload/{object}:
            put:
              parameters:
              - name: "Content-Type"
                in: "header"
                required: false
                type: "string"
              - name: "object"
                in: "path"
                required: true
                type: "string"
              - name: "x-amz-meta-customLabels"
                in: "header"
                required: false
                type: "string"
              responses:
                "200":
                  description: "200 response"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
            options:
              consumes:
              - "application/json"
              parameters:
              - name: "object"
                in: "path"
                required: true
                type: "string"
              responses:
                "200":
                  description: "200 response"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                    Access-Control-Allow-Methods:
                      type: "string"
                    Access-Control-Allow-Headers:
                      type: "string"
        definitions:
          Error:
            type: "object"
            properties:
              code:
                type: "integer"
                format: "int32"
              message:
                type: "string"
          Photo:
            type: "object"
            properties:
              url:
                type: "string"
              labels:
                type: "array"
                items:
                  type: "string"
          SearchResponse:
            type: "object"
            properties:
              results:
                type: "array"
                items:
                  $ref: "#/definitions/Photo"

